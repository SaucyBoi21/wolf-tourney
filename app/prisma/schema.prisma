// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model Tournament {
  id        Int       @id @default(autoincrement())
  name      String
  active    Boolean   @default(true)

  sections  Section[]
}

model Section {
  id           Int         @id @default(autoincrement())
  name         String
  tournamentId Int
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  players      Player[]
  rounds       Round[]
}

model Player {
  id         Int       @id @default(autoincrement())
  name       String
  uscfId     String?   @unique
  rating     Int?
  sectionId  Int
  section    Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  playerRoundStatuses PlayerRoundStatus[]
  whitePairings       Pairing[] @relation("WhitePlayer")
  blackPairings       Pairing[] @relation("BlackPlayer")
}

model Round {
  id         Int       @id @default(autoincrement())
  number     Int
  sectionId  Int
  section    Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  pairings   Pairing[]
  playerRoundStatuses PlayerRoundStatus[]
}

model Pairing {
  id             Int     @id @default(autoincrement())
  roundId        Int
  round          Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)

  whitePlayerId  Int
  whitePlayer    Player  @relation("WhitePlayer", fields: [whitePlayerId], references: [id])

  blackPlayerId  Int?
  blackPlayer    Player? @relation("BlackPlayer", fields: [blackPlayerId], references: [id])

  result         String? // you can define an enum if you prefer: e.g. '1-0', '0-1', '½-½', 'bye'
}

model PlayerRoundStatus {
  id        Int       @id @default(autoincrement())
  playerId  Int
  player    Player    @relation(fields: [playerId], references: [id], onDelete: Cascade)

  roundId   Int
  round     Round     @relation(fields: [roundId], references: [id], onDelete: Cascade)

  status    PlayerStatus
}

enum PlayerStatus {
  playing
  bye
  dropped
}

